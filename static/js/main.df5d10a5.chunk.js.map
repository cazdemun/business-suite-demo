{"version":3,"sources":["app/hooks/useLocalStorage.js","app/Configuration.jsx","app/App.js","serviceWorker.js","index.js"],"names":["useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","TextArea","Input","dataSource","name","age","address","Configuration","configurationName","configurationData","saveConfiguration","configuration","localColumns","setLocalColumns","localDataSource","Form","useForm","configurationForm","useEffect","setFields","className","orientation","form","onFinish","values","data","Item","style","flex","rules","required","message","placeholder","icon","SaveOutlined","htmlType","autoSize","onChange","e","columnsJSON","columns","_","updateColumns","target","tableLayout","SubMenu","Menu","Header","Layout","Content","Sider","dummyConfigurations","title","dataIndex","App","collapsed","setCollapsed","configurations","setConfigurations","selectedConfigurationName","setSelectedConfigurationName","selectedConfiguration","setSelectedConfiguration","Object","keys","length","width","height","color","collapsible","onCollapse","background","mode","defaultSelectedKeys","defaultOpenKeys","borderRight","onClick","map","config","index","offset","span","padding","success","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.df5d10a5.chunk.js","sourcesContent":["// Taken from: https://usehooks.com/useLocalStorage/\r\nimport { useState } from 'react';\r\n\r\nconst useLocalStorage = (key, initialValue) => {\r\n  // State to store our value\r\n  // Pass initial state function to useState so logic is only executed once\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      // Get from local storage by key\r\n      const item = window.localStorage.getItem(key);\r\n      // Parse stored json or if none return initialValue\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      // If error also return initialValue\r\n      console.log(error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  // Return a wrapped version of useState's setter function that ...\r\n  // ... persists the new value to localStorage.\r\n  const setValue = value => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useState\r\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\r\n      // Save state\r\n      setStoredValue(valueToStore);\r\n      // Save to local storage\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      // A more advanced implementation would handle the error case\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n}\r\n\r\nexport default useLocalStorage;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Card, Table, Col, Row, Input, Divider, Button, Form } from \"antd\";\r\nimport { SaveOutlined } from '@ant-design/icons';\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst dataSource = [\r\n  {\r\n    key: '1',\r\n    name: 'Mike',\r\n    age: 32,\r\n    address: '10 Downing Street',\r\n  },\r\n  {\r\n    key: '2',\r\n    name: 'John',\r\n    age: 42,\r\n    address: '10 Downing Street',\r\n  },\r\n];\r\n\r\nconst Configuration = ({ configurationName, configurationData, saveConfiguration = (configuration) => console.log('Not implemented!', `Not saving ${configuration}`) }) => {\r\n  const [localColumns, setLocalColumns] = useState(configurationData)\r\n  const [localDataSource] = useState(dataSource)\r\n  const [configurationForm] = Form.useForm();\r\n\r\n  // When configurationData changes in parent, localColumns does not update\r\n  // https://stackoverflow.com/questions/55840294/how-to-fix-missing-dependency-warning-when-using-useeffect-react-hook\r\n  useEffect(() => {\r\n    setLocalColumns(configurationData);\r\n    configurationForm.setFields([\r\n      { name: \"data\", value: JSON.stringify(configurationData, null, 2) },\r\n      { name: \"name\", value: configurationName }\r\n    ]);\r\n  }, [configurationData, configurationName])\r\n\r\n  const updateColumns = (columnsJSON) => {\r\n    try {\r\n      const columns = JSON.parse(columnsJSON);\r\n      setLocalColumns(columns);\r\n    } catch (_) {\r\n      console.log(\"Invalid JSON\")\r\n    }\r\n  }\r\n\r\n  return <>\r\n    <h1>Business Configuration</h1>\r\n    <Col className=\"h-full\">\r\n      <Divider orientation=\"left\">JSON Especification</Divider>\r\n      <Card className=\"w-full\">\r\n        <Form\r\n          form={configurationForm}\r\n          onFinish={(values) => saveConfiguration({ [values.name]: JSON.parse(values.data) })}>\r\n          <Row>\r\n            <Form.Item\r\n              style={{ flex: \"1\" }}\r\n              name=\"name\"\r\n              rules={[{ required: true, message: 'Please input the configuration name!' }]}>\r\n              <Input placeholder=\"Configuration Name\" />\r\n            </Form.Item>\r\n            <Form.Item>\r\n              <Button\r\n                icon={<SaveOutlined />}\r\n                htmlType=\"submit\">Save</Button>\r\n            </Form.Item>\r\n          </Row>\r\n          <Form.Item\r\n            name=\"data\"\r\n            rules={[{ required: true, message: 'Please input the array in JSON format!' }]}>\r\n            <TextArea\r\n              autoSize\r\n              onChange={(e) => updateColumns(e.target.value)} />\r\n          </Form.Item>\r\n        </Form>\r\n      </Card>\r\n      <Divider orientation=\"left\">Result Table</Divider>\r\n      <Table tableLayout=\"fixed\" columns={localColumns} dataSource={localDataSource} />\r\n    </Col>\r\n  </>\r\n}\r\n\r\nexport default Configuration;\r\n","import React, { useState, useEffect } from 'react';\nimport { Row, Col, Layout, Menu, Button, message } from 'antd';\nimport { FileOutlined, SaveOutlined, DeleteOutlined } from '@ant-design/icons';\nimport useLocalStorage from './hooks/useLocalStorage';\nimport Configuration from './Configuration';\n\nconst { SubMenu } = Menu;\nconst { Header, Content, Sider } = Layout;\n\nconst dummyConfigurations = {\n  'configuration v0.1': [\n    {\n      title: 'Name1',\n      dataIndex: 'name',\n      key: 'name',\n    },\n    {\n      title: 'Age',\n      dataIndex: 'age',\n      key: 'age',\n    },\n    {\n      title: 'Address',\n      dataIndex: 'address',\n      key: 'address',\n    },\n  ],\n  'configuration v0.2': [\n    {\n      title: 'Name2',\n      dataIndex: 'name',\n      key: 'name',\n    },\n    {\n      title: 'Age',\n      dataIndex: 'age',\n      key: 'age',\n    },\n    {\n      title: 'Address',\n      dataIndex: 'address',\n      key: 'address',\n    },\n  ],\n  'configuration v0.3': [\n    {\n      title: 'Name3',\n      dataIndex: 'name',\n      key: 'name',\n    },\n    {\n      title: 'Age',\n      dataIndex: 'age',\n      key: 'age',\n    },\n    {\n      title: 'Address',\n      dataIndex: 'address',\n      key: 'address',\n    },\n  ],\n  'configuration v0.4': [\n    {\n      title: 'Name4',\n      dataIndex: 'name',\n      key: 'name',\n    },\n    {\n      title: 'Age',\n      dataIndex: 'age',\n      key: 'age',\n    },\n    {\n      title: 'Address',\n      dataIndex: 'address',\n      key: 'address',\n    },\n  ],\n  'configuration v0.5': [\n    {\n      title: 'Name5',\n      dataIndex: 'name',\n      key: 'name',\n    },\n    {\n      title: 'Age',\n      dataIndex: 'age',\n      key: 'age',\n    },\n    {\n      title: 'Address',\n      dataIndex: 'address',\n      key: 'address',\n    },\n  ]\n}\n\nfunction App() {\n  const [collapsed, setCollapsed] = useState(false);\n  const [configurations, setConfigurations] = useLocalStorage('bus-saved-configurations', dummyConfigurations)\n  const [selectedConfigurationName, setSelectedConfigurationName] = useState('')\n  const [selectedConfiguration, setSelectedConfiguration] = useState([])\n  // const [selectedLastConfigurationName, setSelectedLastConfigurationName] = useState('')\n\n  // https://stackoverflow.com/questions/55840294/how-to-fix-missing-dependency-warning-when-using-useeffect-react-hook\n  useEffect(() => {\n    if (Object.keys(configurations).length > 0) {\n      setSelectedConfigurationName(Object.keys(configurations)[0]);\n      setSelectedConfiguration(Object.values(configurations)[0]);\n    } else {\n      console.log(\"Implement edge case - new conf\")\n    }\n  }, [])\n\n  const saveConfiguration = (configuration) => {\n    message.success('Configuration saved', 2);\n    setConfigurations({ ...configurations, ...configuration })\n  }\n\n  return (\n    <Layout style={{ width: \"100vw\", height: \"100vh\" }}>\n      <Header><h1 style={{ color: \"white\" }}>BUS Demo</h1></Header>\n      <Layout>\n        <Sider width={250}\n          collapsible\n          collapsed={collapsed}\n          onCollapse={(e) => setCollapsed(e)}\n          style={{ background: \"#fff\", height: \"100%\" }} >\n          <Menu\n            mode=\"inline\"\n            // defaultSelectedKeys={['1']}\n            defaultSelectedKeys={['configuration v0.1']}\n            defaultOpenKeys={['sub1']}\n            style={{ height: '100%', borderRight: 0 }}\n            onClick={(item) => {\n              setSelectedConfigurationName(item.key);\n              setSelectedConfiguration(configurations[item.key]);\n            }}>\n            <SubMenu key=\"sub1\" icon={<SaveOutlined />} title=\"Saved Configurations\">\n              {Object.keys(configurations).map((config, index) =>\n                // <Menu.Item key={(index + 1).toString()}>\n                <Menu.Item key={config}>\n                  <div style={{ width: \"100%\", display: \"flex\", alignItems: \"center\" }}>\n                    <FileOutlined />\n                    <p style={{ flex: \"1\", margin: \"0px\", textOverflow: \"ellipsis\", overflow: \"hidden\" }}>{config}</p>\n                    <Button style={{ padding: \"0px\" }}> <DeleteOutlined /></Button>\n                  </div>\n                </Menu.Item>\n              )}\n            </SubMenu>\n          </Menu>\n        </Sider>\n        <Content style={{ height: \"100%\" }}>\n          <Row>\n            <Col offset={3} span={18} style={{ padding: \"10px 0px\", height: \"100%\" }}>\n              <Configuration saveConfiguration={saveConfiguration} configurationName={selectedConfigurationName} configurationData={selectedConfiguration} />\n            </Col>\n          </Row>\n        </Content>\n      </Layout>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}