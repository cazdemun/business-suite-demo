{"version":3,"sources":["app/DynamicTable.jsx","app/hooks/useLocalStorage.js","app/App.js","serviceWorker.js","index.js"],"names":["TextArea","Input","columns","title","dataIndex","key","dataSource","name","age","address","DynamicTable","saveConfiguration","configuration","console","log","useState","localColumns","setLocalColumns","localDataSource","setLocalDataSource","className","span","style","display","onFinish","values","Item","flex","rules","required","message","placeholder","icon","SaveOutlined","htmlType","tableLayout","width","minHeight","autoSize","defaultValue","JSON","stringify","onChange","e","columnsJSON","parse","_","updateColumns","target","value","dataSourceJSON","updateDataSource","useLocalStorage","initialValue","item","window","localStorage","getItem","error","storedValue","setStoredValue","valueToStore","Function","setItem","SubMenu","Menu","Header","Layout","Content","Sider","dummyConfigurations","App","collapsed","setCollapsed","configurations","setConfigurations","height","color","collapsible","onCollapse","background","mode","defaultSelectedKeys","defaultOpenKeys","borderRight","map","config","index","toString","alignItems","FileOutlined","margin","textOverflow","overflow","padding","DeleteOutlined","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.b226d21c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Card, Table, Col, Row, Input, Divider, Button, Form } from \"antd\";\r\nimport { SaveOutlined } from '@ant-design/icons';\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst columns = [\r\n  {\r\n    title: 'Name',\r\n    dataIndex: 'name',\r\n    key: 'name',\r\n  },\r\n  {\r\n    title: 'Age',\r\n    dataIndex: 'age',\r\n    key: 'age',\r\n  },\r\n  {\r\n    title: 'Address',\r\n    dataIndex: 'address',\r\n    key: 'address',\r\n  },\r\n];\r\n\r\nconst dataSource = [\r\n  {\r\n    key: '1',\r\n    name: 'Mike',\r\n    age: 32,\r\n    address: '10 Downing Street',\r\n  },\r\n  {\r\n    key: '2',\r\n    name: 'John',\r\n    age: 42,\r\n    address: '10 Downing Street',\r\n  },\r\n];\r\n\r\nconst DynamicTable = ({ saveConfiguration = (configuration) => console.log('Not implemented!', `Not saving ${configuration}`) }) => {\r\n  const [localColumns, setLocalColumns] = useState(columns)\r\n  const [localDataSource, setLocalDataSource] = useState(dataSource)\r\n\r\n  const updateColumns = (columnsJSON) => {\r\n    try {\r\n      const columns = JSON.parse(columnsJSON);\r\n      setLocalColumns(columns);\r\n    } catch (_) {\r\n      console.log(\"Invalid JSON\")\r\n    }\r\n  }\r\n\r\n  const updateDataSource = (dataSourceJSON) => {\r\n    try {\r\n      const dataSource = JSON.parse(dataSourceJSON);\r\n      setLocalDataSource(dataSource);\r\n    } catch (_) {\r\n      console.log(\"Invalid JSON\")\r\n    }\r\n  }\r\n\r\n  return <>\r\n    <h1>Configuration Generator</h1>\r\n    <Col className=\"h-full\">\r\n      <Col span={24} >\r\n        <Card title={\r\n          <Form style={{ display: \"flex\" }}\r\n            onFinish={(values) => saveConfiguration(values.configuration)}>\r\n            <Form.Item\r\n              style={{ flex: \"1\" }}\r\n              name=\"configuration\"\r\n              rules={[{ required: true, message: 'Please input the configuration name!' }]}>\r\n              <Input placeholder=\"Configuration Name\" />\r\n            </Form.Item>\r\n            <Form.Item>\r\n              <Button\r\n                icon={<SaveOutlined />}\r\n                htmlType=\"submit\">Save</Button>\r\n            </Form.Item>\r\n          </Form>}\r\n          className=\"h-full\">\r\n          <Table tableLayout=\"fixed\" columns={localColumns} dataSource={localDataSource} />\r\n        </Card>\r\n      </Col>\r\n      <Divider />\r\n      <Row span={24}>\r\n        <Card title=\"Columns JSON\" style={{ width: \"50%\", minHeight: \"50%\" }}>\r\n          <TextArea\r\n            autoSize\r\n            defaultValue={JSON.stringify(columns, null, 2)}\r\n            onChange={(e) => updateColumns(e.target.value)} />\r\n        </Card>\r\n        <Card title=\"Data JSON\" style={{ width: \"50%\", minHeight: \"50%\" }}>\r\n          <TextArea\r\n            autoSize\r\n            defaultValue={JSON.stringify(dataSource, null, 2)}\r\n            onChange={(e) => updateDataSource(e.target.value)} />\r\n        </Card>\r\n      </Row>\r\n      <Divider />\r\n      <Col span={24}>\r\n        <Card title=\"Final Schema\" style={{ minHeight: \"50%\" }}>\r\n          <TextArea\r\n            autoSize\r\n            defaultValue=\"final schema\"\r\n            onChange={(e) => console.log(e.target.value)} />\r\n        </Card>\r\n      </Col>\r\n    </Col>\r\n  </>\r\n}\r\n\r\nexport default DynamicTable;\r\n","// Taken from: https://usehooks.com/useLocalStorage/\r\nimport { useState } from 'react';\r\n\r\nconst useLocalStorage = (key, initialValue) => {\r\n  // State to store our value\r\n  // Pass initial state function to useState so logic is only executed once\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      // Get from local storage by key\r\n      const item = window.localStorage.getItem(key);\r\n      // Parse stored json or if none return initialValue\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      // If error also return initialValue\r\n      console.log(error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  // Return a wrapped version of useState's setter function that ...\r\n  // ... persists the new value to localStorage.\r\n  const setValue = value => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useState\r\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\r\n      // Save state\r\n      setStoredValue(valueToStore);\r\n      // Save to local storage\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      // A more advanced implementation would handle the error case\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n}\r\n\r\nexport default useLocalStorage;\r\n","import React, { useState } from 'react';\nimport DynamicTable from './DynamicTable';\nimport { Row, Col, Layout, Menu, Button } from 'antd';\nimport { FileOutlined, SaveOutlined, DeleteOutlined } from '@ant-design/icons';\nimport useLocalStorage from './hooks/useLocalStorage';\n\nconst { SubMenu } = Menu;\nconst { Header, Content, Sider } = Layout;\n\nconst dummyConfigurations = [\n  'configuration v0.1',\n  'configuration v0.2',\n  'configuration v0.3',\n  'configuration v0.4',\n  'configuration v0.5'\n]\n\nfunction App() {\n  const [collapsed, setCollapsed] = useState(false);\n  const [configurations, setConfigurations] = useLocalStorage('bus-saved-configurations', dummyConfigurations)\n\n  const saveConfiguration = (configuration) => {\n    setConfigurations([...configurations, configuration])\n  }\n\n  return (\n    <Layout style={{ width: \"100vw\", height: \"100vh\" }}>\n      <Header><h1 style={{ color: \"white\" }}>BUS Demo</h1></Header>\n      <Layout>\n        <Sider width={250}\n          collapsible\n          collapsed={collapsed}\n          onCollapse={(e) => setCollapsed(e)}\n          style={{ background: \"#fff\", height: \"100%\"  }} >\n          <Menu\n            mode=\"inline\"\n            defaultSelectedKeys={['1']}\n            defaultOpenKeys={['sub1']}\n            style={{ height: '100%', borderRight: 0 }}\n          >\n            <SubMenu key=\"sub1\" icon={<SaveOutlined />} title=\"Saved Configurations\">\n              {configurations.map((config, index) =>\n                <Menu.Item key={(index + 1).toString()}>\n                  <div style={{ width: \"100%\", display: \"flex\", alignItems: \"center\" }}>\n                    <FileOutlined />\n                    <p style={{ flex: \"1\", margin: \"0px\", textOverflow: \"ellipsis\", overflow: \"hidden\" }}>{config}</p>\n                    <Button style={{ padding: \"0px\" }}> <DeleteOutlined /></Button>\n                  </div>\n                </Menu.Item>\n              )}\n            </SubMenu>\n          </Menu>\n        </Sider>\n        <Content style={{ height: \"100%\" }}>\n          <Row>\n            <Col span={3} style={{ height: \"100%\" }} />\n            <Col span={18} style={{ padding: \"10px 0px 10px 0px\", height: \"100%\" }}>\n              <DynamicTable saveConfiguration={saveConfiguration} />\n            </Col>\n            <Col span={3} style={{ height: \"100%\" }} />\n          </Row>\n        </Content>\n      </Layout>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}