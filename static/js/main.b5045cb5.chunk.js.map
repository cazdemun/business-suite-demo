{"version":3,"sources":["app/DynamicTable.jsx","app/App.js","serviceWorker.js","index.js"],"names":["TextArea","Input","columns","title","dataIndex","key","dataSource","name","age","address","DynamicTable","useState","localColumns","setLocalColumns","localDataSource","setLocalDataSource","className","span","placeholder","style","width","minHeight","autoSize","defaultValue","JSON","stringify","onChange","e","columnsJSON","parse","_","console","log","updateColumns","target","value","dataSourceJSON","updateDataSource","App","height","Header","color","Content","overflowY","padding","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mUAGQA,EAAaC,IAAbD,SAEFE,EAAU,CACd,CACEC,MAAO,OACPC,UAAW,OACXC,IAAK,QAEP,CACEF,MAAO,MACPC,UAAW,MACXC,IAAK,OAEP,CACEF,MAAO,UACPC,UAAW,UACXC,IAAK,YAIHC,EAAa,CACjB,CACED,IAAK,IACLE,KAAM,OACNC,IAAK,GACLC,QAAS,qBAEX,CACEJ,IAAK,IACLE,KAAM,OACNC,IAAK,GACLC,QAAS,sBA6DEC,EAzDM,WAAO,IAAD,EACeC,mBAAST,GADxB,mBAClBU,EADkB,KACJC,EADI,OAEqBF,mBAASL,GAF9B,mBAElBQ,EAFkB,KAEDC,EAFC,KAsBzB,OAAO,oCACL,kBAAC,IAAD,CAAKC,UAAU,UACb,kBAAC,IAAD,CAAKC,KAAM,IACT,kBAAC,IAAD,CAAMd,MAAO,kBAAC,IAAD,CAAOe,YAAY,gBAAkBF,UAAU,UAC1D,kBAAC,IAAD,CAAOd,QAASU,EAAcN,WAAYQ,MAG9C,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAKG,KAAM,IACT,kBAAC,IAAD,CAAMd,MAAM,eAAegB,MAAO,CAAEC,MAAO,MAAOC,UAAW,QAC3D,kBAACrB,EAAD,CACEsB,UAAQ,EACRC,aAAcC,KAAKC,UAAUvB,EAAS,KAAM,GAC5CwB,SAAU,SAACC,GAAD,OA/BE,SAACC,GACrB,IACE,IAAM1B,EAAUsB,KAAKK,MAAMD,GAC3Bf,EAAgBX,GAChB,MAAO4B,GACPC,QAAQC,IAAI,iBA0BWC,CAAcN,EAAEO,OAAOC,WAE5C,kBAAC,IAAD,CAAMhC,MAAM,YAAYgB,MAAO,CAAEC,MAAO,MAAOC,UAAW,QACxD,kBAACrB,EAAD,CACEsB,UAAQ,EACRC,aAAcC,KAAKC,UAAUnB,EAAY,KAAM,GAC/CoB,SAAU,SAACC,GAAD,OA5BK,SAACS,GACxB,IACE,IAAM9B,EAAakB,KAAKK,MAAMO,GAC9BrB,EAAmBT,GACnB,MAAOwB,GACPC,QAAQC,IAAI,iBAuBWK,CAAiBV,EAAEO,OAAOC,YAGjD,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAKlB,KAAM,IACT,kBAAC,IAAD,CAAMd,MAAM,eAAegB,MAAO,CAAEE,UAAW,QAC7C,kBAACrB,EAAD,CACEsB,UAAQ,EACRC,aAAa,eACbG,SAAU,SAACC,GAAD,OAAOI,QAAQC,IAAIL,EAAEO,OAAOC,e,SCnEnCG,MAjBf,WACE,OACE,kBAAC,IAAD,CAAQnB,MAAO,CAAEC,MAAO,QAASmB,OAAQ,UACvC,kBAAC,IAAOC,OAAR,KAAe,wBAAIrB,MAAO,CAAEsB,MAAO,UAApB,aACf,kBAAC,IAAOC,QAAR,CAAgBvB,MAAO,CAAEE,UAAW,QAASsB,UAAW,SACtD,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAK1B,KAAM,EAAGE,MAAO,CAAEoB,OAAQ,UAC/B,kBAAC,IAAD,CAAKtB,KAAM,GAAIE,MAAO,CAAEyB,QAAS,oBAAqBL,OAAQ,SAC5D,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAKtB,KAAM,EAAGE,MAAO,CAAEoB,OAAQ,cCFrBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.b5045cb5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Card, Table, Col, Row, Input, Divider } from \"antd\";\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst columns = [\r\n  {\r\n    title: 'Name',\r\n    dataIndex: 'name',\r\n    key: 'name',\r\n  },\r\n  {\r\n    title: 'Age',\r\n    dataIndex: 'age',\r\n    key: 'age',\r\n  },\r\n  {\r\n    title: 'Address',\r\n    dataIndex: 'address',\r\n    key: 'address',\r\n  },\r\n];\r\n\r\nconst dataSource = [\r\n  {\r\n    key: '1',\r\n    name: 'Mike',\r\n    age: 32,\r\n    address: '10 Downing Street',\r\n  },\r\n  {\r\n    key: '2',\r\n    name: 'John',\r\n    age: 42,\r\n    address: '10 Downing Street',\r\n  },\r\n];\r\n\r\nconst DynamicTable = () => {\r\n  const [localColumns, setLocalColumns] = useState(columns)\r\n  const [localDataSource, setLocalDataSource] = useState(dataSource)\r\n\r\n  const updateColumns = (columnsJSON) => {\r\n    try {\r\n      const columns = JSON.parse(columnsJSON);\r\n      setLocalColumns(columns);\r\n    } catch (_) {\r\n      console.log(\"Invalid JSON\")\r\n    }\r\n  }\r\n\r\n  const updateDataSource = (dataSourceJSON) => {\r\n    try {\r\n      const dataSource = JSON.parse(dataSourceJSON);\r\n      setLocalDataSource(dataSource);\r\n    } catch (_) {\r\n      console.log(\"Invalid JSON\")\r\n    }\r\n  }\r\n\r\n  return <>\r\n    <Col className=\"h-full\">\r\n      <Col span={24} >\r\n        <Card title={<Input placeholder=\"Entity Name\" />} className=\"h-full\">\r\n          <Table columns={localColumns} dataSource={localDataSource} />\r\n        </Card>\r\n      </Col>\r\n      <Divider />\r\n      <Row span={24}>\r\n        <Card title=\"Columns JSON\" style={{ width: \"50%\", minHeight: \"50%\" }}>\r\n          <TextArea\r\n            autoSize\r\n            defaultValue={JSON.stringify(columns, null, 2)}\r\n            onChange={(e) => updateColumns(e.target.value)} />\r\n        </Card>\r\n        <Card title=\"Data JSON\" style={{ width: \"50%\", minHeight: \"50%\" }}>\r\n          <TextArea\r\n            autoSize\r\n            defaultValue={JSON.stringify(dataSource, null, 2)}\r\n            onChange={(e) => updateDataSource(e.target.value)} />\r\n        </Card>\r\n      </Row>\r\n      <Divider />\r\n      <Col span={24}>\r\n        <Card title=\"Final Schema\" style={{ minHeight: \"50%\" }}>\r\n          <TextArea\r\n            autoSize\r\n            defaultValue=\"final schema\"\r\n            onChange={(e) => console.log(e.target.value)} />\r\n        </Card>\r\n      </Col>\r\n    </Col>\r\n  </>\r\n}\r\n\r\nexport default DynamicTable;\r\n","import React from 'react';\nimport DynamicTable from './DynamicTable';\nimport { Row, Col, Layout } from 'antd';\n\nfunction App() {\n  return (\n    <Layout style={{ width: \"100vw\", height: \"100vh\" }}>\n      <Layout.Header><h1 style={{ color: \"white\" }}>BUS Demo</h1></Layout.Header>\n      <Layout.Content style={{ minHeight: \"500px\", overflowY: \"auto\" }}>\n        <Row>\n          <Col span={3} style={{ height: \"100%\" }} />\n          <Col span={18} style={{ padding: \"10px 0px 10px 0px\", height: \"100%\" }}>\n            <DynamicTable />\n          </Col>\n          <Col span={3} style={{ height: \"100%\" }} />\n        </Row>\n      </Layout.Content>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}